# Python native modules
from shutil import copyfile

import webbrowser
import os


def generate_html(content: str):
	html = """
	<html>
		<body style="background:#97a6bf" align="middle" >
		<h1 style="text-align: center;">Report generated by Filter-Tool</h1>
		<p style="text-align: center;"><span style="color: #800080;"><strong>Farall, Facundo David</strong></span></p>
		<p style="text-align: center;"><span style="color: #800080;"><strong>Gaytan, Joaqu&iacute;n Oscar</strong></span></p>
		<p style="text-align: center;"><span style="color: #800080;"><strong>&nbsp;Kammann, Lucas Agust&iacute;n</strong></span></p>
		<p style="text-align: center;"><span style="color: #800080;"><strong>Maselli, Carlos Javier</strong></span></p>
		<p style="text-align: center;"><span style="color: #800080;"><strong>M&uuml;ller, Malena</strong></span></p>
		{}
		</body>
	</html>
	""".format(content)
	return html


def generate_stage_html(stage_number: int):
	return "<h2 style=\"text-align: center;\">Etapa N&deg; {}</h2>".format(stage_number)


def generate_cell_html(cell_name: str, cell_type: str):
	return """
	<h3 style="text-align: center;">Celda:&nbsp;<strong><span style="color: #0000ff;">{}&nbsp;<span style="color: #000000;">Tipo:&nbsp;<span style="color: #ffcc00;">{}</span></span>&nbsp;</span></strong></h3>
	""".format(cell_name, cell_type)


def generate_sensitivities_html(sensitivities: dict):
	table_html = """
		<table style="border:1px solid black;margin-left:auto;margin-right:auto;" cellpadding="5">
		<tbody>
	"""
	
	table_html += "<tr style=\"background-color: #45668a;\">"
	table_html += "<th style=\"width: 66px; text-align: center;\">&nbsp;<b></b></th>"
	for component_label in sensitivities[list(sensitivities.keys())[0]].keys():
		table_html += "<th style=\"width: 66px; text-align: center;\">&nbsp;<b>{}</b></th>".format(component_label)
	table_html += "</tr>"
	
	for key, value in sensitivities.items():
		table_html += "<tr>"
		table_html += "<td style=\"width: 66px; text-align: center;\">&nbsp;{}</td>".format(key)
		for sensitivity in value.values():
			table_html += "<td style=\"width: 66px; text-align: center;\">&nbsp;{}</td>".format(sensitivity)
		table_html += "</tr>"
	
	table_html += """
		</tbody>
		</table>
	"""
	return table_html


def generate_components_html(components: dict):
	table_html = """
		<table style="border:1px solid black;margin-left:auto;margin-right:auto;" cellpadding="5">
		<tbody>
	"""
	
	table_html += "<tr style=\"background-color: #45668a;\">"
	for component_label in components.keys():
		table_html += "<th style=\"width: 66px; text-align: center;\">&nbsp;<b>{}</b></th>".format(component_label)
	table_html += "</tr>"
	
	table_html += "<tr>"
	for component_value in components.values():
		table_html += "<td style=\"width: 66px; text-align: center;\">&nbsp;{}</td>".format(component_value)
	table_html += "</tr>"
	
	table_html += """
		</tbody>
		</table>
	"""
	return table_html


def generate_image_html(cell_circuit: str):
	return "<table align=\"center\" ><th><p><img src=\"{}\" border=2 align=\"middle\"></p>\n </th></table>".format(cell_circuit)


def generate_html_content(stage_number: int, cell_name: str, cell_type: str, cell_circuit: str, components: dict, sensitivities: dict):
	""" Generates the string content of a HTML file, to describe one 
	stage or cell """
	html_content = "<hr />"
	
	html_content += generate_stage_html(stage_number)
	html_content += generate_cell_html(cell_name, cell_type)
	html_content += generate_image_html(cell_circuit)
	
	html_content += """
		<p>&nbsp;</p>
		<h4 align=\"center\" >Tabla de componentes</h4>
	"""

	html_content += generate_components_html(components)
	
	html_content += """
		<p>&nbsp;</p>
		<h4 align=\"center\" >Tabla de sensibilidades</h4>
	"""

	html_content += generate_sensitivities_html(sensitivities)
	
	return html_content


def generate_by_stages(stages: list, filename: str):
	# Creating the output location folder
	ROOT_OUTPUT_FOLDER = "output"
	if not os.path.exists(ROOT_OUTPUT_FOLDER):
		os.mkdir(ROOT_OUTPUT_FOLDER)

	# Copying resources needed for the html file
	for stage in stages:
		copyfile(stage.get_circuit(), os.path.join(ROOT_OUTPUT_FOLDER, stage.get_circuit().split("/")[-1]))

	file = open("{}".format(filename), "w")

	html_content = ""
	for index, stage in enumerate(stages):
		html_content += generate_html_content(index + 1, stage.get_name(), stage.get_type(), stage.get_circuit().split("/")[-1], stage.get_components(), stage.get_sensitivities())

	file.write(generate_html(html_content))
	file.close()

	copyfile(filename, os.path.join(ROOT_OUTPUT_FOLDER, filename))
	os.remove(filename)
	webbrowser.open('file://' + os.path.realpath(os.path.join(ROOT_OUTPUT_FOLDER, filename)))
